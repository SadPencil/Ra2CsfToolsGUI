<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Xaml_Txt_HomeTabAdvancedMode" xml:space="preserve">
    <value>高级模式</value>
  </data>
  <data name="Xaml_Txt_HomeTabHeader" xml:space="preserve">
    <value>主页</value>
  </data>
  <data name="Xaml_Txt_HomeTabTextBlock1" xml:space="preserve">
    <value>本工具可帮助您处理红色警戒 2 和尤里的复仇所识别的字符串表文件（.csf）。它可以帮助您：</value>
  </data>
  <data name="Xaml_Txt_HomeTabTextBlock2" xml:space="preserve">
    <value>将 .csf 文件转换为 .ini 文件，使用您喜欢的文本编辑器来编辑它，再转换回 .csf 文件。</value>
  </data>
  <data name="Xaml_Txt_HomeTabTextBlock3" xml:space="preserve">
    <value>您无需保留 .csf 文件。您只需在 Git 仓库中存储 .ini 文件即可，因为它包含了生成 .csf 文件所需的一切数据。</value>
  </data>
  <data name="Xaml_Txt_HomeTabTextBlock4" xml:space="preserve">
    <value>“高级模式”中有更多功能...</value>
  </data>
  <data name="Xaml_Txt_HomeTabTextBlock5" xml:space="preserve">
    <value>将译文文件与上游文件并排显示，以便您无需手动比较两个文件即可完成翻译。</value>
  </data>
  <data name="Xaml_Txt_HomeTabTextBlock6" xml:space="preserve">
    <value>当上游文件更新后，高亮显示过时的旧译文，以便您可以快速更新译文。</value>
  </data>
  <data name="Xaml_Txt_HomeTabTextBlock7" xml:space="preserve">
    <value>要开始使用，只需将 .csf/.ini 文件拖放到此处。</value>
  </data>
  <data name="Xaml_Txt_SettingsTabHeader" xml:space="preserve">
    <value>设置</value>
  </data>
  <data name="Xaml_Txt_SettingsGroupboxHeader" xml:space="preserve">
    <value>编码 1252 变通方案选项</value>
  </data>
  <data name="Xaml_Txt_SettingsTextBlock1" xml:space="preserve">
    <value>对于代码点 128-159 (0x80-0x9F)，红色警戒 2 的原始 game.fnt 文件错误地将这些字符视为 Windows-1252，而不是 Unicode (ISO-8859-1)。在某些模组和某些编辑器中，这些字符可能被保存为 Windows-1252 编码，这是不正确的。但是，用户可能仍然需要处理这些文件。您可以决定是将 128-159 视为 Windows-1252 还是 Unicode。勾选下面两个复选框意味着前者，这与某些模组和某些编辑器兼容。取消勾选下面两个复选框意味着后者，这是正确的方式。原始 game.fnt 文件在这些代码点上具有正确的字体数据，商标字符 ™ 除外。</value>
  </data>
  <data name="Xaml_Txt_SettingsCheckbox1" xml:space="preserve">
    <value>在加载 .csf 文件时启用 Windows-1252 变通方案。</value>
  </data>
  <data name="Xaml_Txt_SettingsCheckbox2" xml:space="preserve">
    <value>在写入 .csf 文件时启用 Windows-1252 变通方案。</value>
  </data>
  <data name="Xaml_Txt_FormatConverterTabHeader" xml:space="preserve">
    <value>格式转换器</value>
  </data>
  <data name="Xaml_Txt_FormatConverterTextBlock1" xml:space="preserve">
    <value>红色警戒 2 的字符串表以 .csf 文件形式呈现，由于大多数 csf 编辑器是在几十年前创建的，因此不便于编辑。本工具允许用户将字符串表从 .csf 文件转换为 .ini 文件，然后再转换回游戏可识别的 .csf 文件。</value>
  </data>
  <data name="Xaml_Txt_FormatConverterTextBlock2" xml:space="preserve">
    <value>注意：.ini 文件的文本编码必须为 UTF-8（无 BOM）。</value>
  </data>
  <data name="Xaml_Txt_FormatConverterButton1_Basic" xml:space="preserve">
    <value>加载字符串表文件（.csf/.ini）...</value>
  </data>
  <data name="Xaml_Txt_FormatConverterButton1_Advanced" xml:space="preserve">
    <value>加载字符串表文件（.csf/.ini/.yaml/.json）...</value>
  </data>
  <data name="Xaml_Txt_FormatConverterButton2" xml:space="preserve">
    <value>保存为 .ini 文件...</value>
  </data>
  <data name="Xaml_Txt_FormatConverterButton3" xml:space="preserve">
    <value>保存为 .csf 文件...</value>
  </data>
  <data name="Xaml_Txt_FormatConverterButton4" xml:space="preserve">
    <value>保存为 .yaml 文件...</value>
  </data>
  <data name="Xaml_Txt_FormatConverterButton5" xml:space="preserve">
    <value>保存为 .json 文件...</value>
  </data>
  <data name="Xaml_Txt_FormatConverterTextBlock3" xml:space="preserve">
    <value>字符串表文件的内容在下面显示以供预览。要修改它，请将其保存为 .ini 文件。</value>
  </data>
  <data name="Xaml_Txt_LabelOverrideTabHeader" xml:space="preserve">
    <value>标签覆盖</value>
  </data>
  <data name="Xaml_Txt_LabelOverrideTextBlock1" xml:space="preserve">
    <value>本工具现在支持包含大写字母的标签名称。选择一个上游字符串表文件和您当前的字符串表文件。本工具将比较每个标签（忽略大小写）并优先使用上游的标签。</value>
  </data>
  <data name="Xaml_Txt_LabelOverrideButton1" xml:space="preserve">
    <value>加载上游字符串表文件（.csf/.ini）...</value>
  </data>
  <data name="Xaml_Txt_LabelOverrideButton2" xml:space="preserve">
    <value>加载当前字符串表文件（.csf/.ini）...</value>
  </data>
  <data name="Xaml_Txt_LabelOverrideButton3" xml:space="preserve">
    <value>保存为 .csf 文件...</value>
  </data>
  <data name="Xaml_Txt_LabelOverrideButton4" xml:space="preserve">
    <value>保存为 .ini 文件...</value>
  </data>
  <data name="Xaml_Txt_LabelCheckTabHeader" xml:space="preserve">
    <value>标签检查</value>
  </data>
  <data name="Xaml_Txt_LabelCheckTextBlock1" xml:space="preserve">
    <value>检查您的地图文件中是否缺少 CSF 标签。</value>
  </data>
  <data name="Xaml_Txt_LabelCheckButton1" xml:space="preserve">
    <value>加载字符串表文件（.csf/.ini）...</value>
  </data>
  <data name="Xaml_Txt_LabelCheckButton2" xml:space="preserve">
    <value>选择包含地图文件（.map/.ypr）的文件夹...</value>
  </data>
  <data name="Xaml_Txt_LabelCheckTextboxHeader" xml:space="preserve">
    <value>注意：在生成的 .ini 文件中，所有缺失标签的值都将替换为以下文本：</value>
  </data>
  <data name="Xaml_Txt_LabelCheckButton3" xml:space="preserve">
    <value>保存为 .ini 文件...</value>
  </data>
  <data name="Xaml_Txt_TranslationNewTabHeader" xml:space="preserve">
    <value>翻译助手 - 新建</value>
  </data>
  <data name="Xaml_Txt_TranslationNewTextBlock1" xml:space="preserve">
    <value>选择一个上游字符串表文件，并保存一个便于翻译的 .ini 文件。该 .ini 文件可以在“格式转换器”选项卡中转换回 .csf 文件。</value>
  </data>
  <data name="Xaml_Txt_TranslationNewTextboxHeader" xml:space="preserve">
    <value>注意：在生成的 .ini 文件中，所有需要翻译的值都将替换为以下文本：</value>
  </data>
  <data name="Xaml_Txt_TranslationNewButton1" xml:space="preserve">
    <value>加载上游字符串表文件（.csf/.ini）...</value>
  </data>
  <data name="Xaml_Txt_TranslationNewButton2" xml:space="preserve">
    <value>保存为 .ini 文件以供翻译...</value>
  </data>
  <data name="Xaml_Txt_TranslationTileTabHeader" xml:space="preserve">
    <value>翻译助手 - 并排</value>
  </data>
  <data name="Xaml_Txt_TranslationTileTextBlock1" xml:space="preserve">
    <value>选择一个上游字符串表文件和一个已翻译的字符串表文件，并保存一个便于比较和检查的 .ini 文件。该 .ini 文件可以在“格式转换器”选项卡中转换回 .csf 文件。</value>
  </data>
  <data name="Xaml_Txt_TranslationTileButton1" xml:space="preserve">
    <value>加载上游字符串表文件（.csf/.ini）...</value>
  </data>
  <data name="Xaml_Txt_TranslationTileButton2" xml:space="preserve">
    <value>加载已翻译的字符串表文件（.csf/.ini）...</value>
  </data>
  <data name="Xaml_Txt_TranslationTileButton3" xml:space="preserve">
    <value>保存为 .ini 文件以供比较...</value>
  </data>
  <data name="Xaml_Txt_TranslationOverrideTabHeader" xml:space="preserve">
    <value>翻译助手 - 覆盖</value>
  </data>
  <data name="Xaml_Txt_TranslationOverrideTextBlock1" xml:space="preserve">
    <value>选择一个上游字符串表文件和一个已翻译的字符串表文件，并保存一个 .ini 文件，当标签在已翻译的文件中存在时，将选择其值；否则，将选择上游文件中显示的标签。该 .ini 文件可以在“格式转换器”选项卡中转换回 .csf 文件。</value>
  </data>
  <data name="Xaml_Txt_TranslationOverrideButton1" xml:space="preserve">
    <value>加载上游字符串表文件（.csf/.ini）...</value>
  </data>
  <data name="Xaml_Txt_TranslationOverrideButton2" xml:space="preserve">
    <value>加载已翻译的字符串表文件（.csf/.ini）...</value>
  </data>
  <data name="Xaml_Txt_TranslationOverrideButton3" xml:space="preserve">
    <value>保存为 .ini 文件以供比较...</value>
  </data>
  <data name="Xaml_Txt_TranslationUpdateTabHeader" xml:space="preserve">
    <value>翻译助手 - 更新</value>
  </data>
  <data name="Xaml_Txt_TranslationUpdateTextBlock1" xml:space="preserve">
    <value>选择一个旧版上游字符串表文件、一个新版上游字符串表文件和一个旧版已翻译的字符串表文件，并保存一个便于更新译文的 .ini 文件。该 .ini 文件可以在“格式转换器”选项卡中转换回 .csf 文件。</value>
  </data>
  <data name="Xaml_Txt_TranslationUpdateButton1" xml:space="preserve">
    <value>加载旧版上游字符串表文件（.csf/.ini）...</value>
  </data>
  <data name="Xaml_Txt_TranslationUpdateButton2" xml:space="preserve">
    <value>加载新版上游字符串表文件（.csf/.ini）...</value>
  </data>
  <data name="Xaml_Txt_TranslationUpdateButton3" xml:space="preserve">
    <value>加载旧版已翻译的字符串表文件（.csf/.ini）...</value>
  </data>
  <data name="Xaml_Txt_TranslationUpdateButton4" xml:space="preserve">
    <value>保存为 .ini 文件以供更新译文...</value>
  </data>
  <data name="Xaml_Txt_TranslationUpdateCheckTabHeader" xml:space="preserve">
    <value>翻译助手 - 更新检查</value>
  </data>
  <data name="Xaml_Txt_TranslationUpdateCheckTextBlock1" xml:space="preserve">
    <value>选择一个旧版上游字符串表文件、一个新版上游字符串表文件、一个旧版已翻译的字符串表文件和一个新版已翻译的字符串表文件，并保存一个 .ini 文件，用于检查某些标签是否仍为旧版本。该 .ini 文件可以在“格式转换器”选项卡中转换回 .csf 文件。</value>
  </data>
  <data name="Xaml_Txt_TranslationUpdateCheckButton1" xml:space="preserve">
    <value>加载旧版上游字符串表文件（.csf/.ini）...</value>
  </data>
  <data name="Xaml_Txt_TranslationUpdateCheckButton2" xml:space="preserve">
    <value>加载新版上游字符串表文件（.csf/.ini）...</value>
  </data>
  <data name="Xaml_Txt_TranslationUpdateCheckButton3" xml:space="preserve">
    <value>加载旧版已翻译的字符串表文件（.csf/.ini）...</value>
  </data>
  <data name="Xaml_Txt_TranslationUpdateCheckButton4" xml:space="preserve">
    <value>加载新版已翻译的字符串表文件（.csf/.ini）...</value>
  </data>
  <data name="Xaml_Txt_TranslationUpdateCheckButton5" xml:space="preserve">
    <value>保存为 .ini 文件以供更新译文...</value>
  </data>
  <data name="Xaml_Txt_WatchModeTabHeader" xml:space="preserve">
    <value>监视模式</value>
  </data>
  <data name="Xaml_Txt_WatchModeTextBlock1" xml:space="preserve">
    <value>在下面的文本框中，输入要监视的 .ini 文件和要生成的 .csf 文件的配对。每对之间用逗号分隔。您可以通过将每对放在新行上来输入多对。程序启动后，它将监视 .ini 文件。每当 .ini 文件发生更改时，程序将自动生成相应的 .csf 文件。</value>
  </data>
  <data name="Xaml_Txt_WatchModeTextBlock2" xml:space="preserve">
    <value>示例：C:\path\to\stringtables\ra2.ini, D:\path\to\game\ra2.csf</value>
  </data>
  <data name="Xaml_Txt_WatchModeButton1" xml:space="preserve">
    <value>保存并应用</value>
  </data>
</root>